html {
  color-scheme: dark light;
}

@media (prefers-color-scheme: light) {
  :root {
    --blend-text-color: #FFF;
    --blend-back-color: #000;
    --blend-highlight-color: #000;
    --effect-bright-level: 85%;
  }
}
[data-theme=light] {
  --blend-text-color: #FFF;
  --blend-back-color: #000;
  --blend-highlight-color: #000;
}

[data-style=sharp] {
  --roundness: 0;
}

[data-style=modern] {
  --spacing: var(--lg);
}

@property --base {
  syntax: "<lenght";
  inherits: false;
  initial-value: 1.6rem;
}
@property --block-spacing {
  syntax: "<lenght>";
  inherits: true;
  initial-value: 0.4rem;
}
@property --inline-spacing {
  syntax: "<lenght>";
  inherits: true;
  initial-value: 0.8rem;
}
@property --roundness {
  syntax: "<lenght>";
  inherits: true;
  initial-value: 0.4vmin;
}
body {
  --font-size: var(--md);
  font-size: var(--font-size);
  font-family: var(--font-family);
  font-weight: var(--font-weight);
  line-height: var(--line-height);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-smoothing: antialiased;
}

:where(h1) {
  --text-color: var(--accent);
  color: var(--text-color);
}

h1, h2, h3,
h4, h5, h6 {
  --spacing: var(--lg);
  margin-bottom: var(--spacing);
}

h2 {
  --spacing: var(--md) ;
}

h3, h4 {
  --spacing: var(--sm);
}

h5 {
  --spacing: var(--sm) ;
}

h6 {
  --spacing: var(--xs) ;
}

p {
  --text-color: var(--content-text);
  --font-weight: 500;
  color: var(--text-color);
  font-weight: var(--font-weight);
}
p:not(:last-child) {
  margin-bottom: var(--lg);
}

code {
  --font-family: monospace;
  --bg: var(--foreground-secondary)
  font-family: var(--font-family);
  background-color: var(--bg);
}

p.muted, h1.muted, h2.muted, h3.muted, h4.muted, h5.muted, h6.muted, span.muted, a.muted, li.muted {
  color: var(--muted-text);
}
p.foreground, h1.foreground, h2.foreground, h3.foreground, h4.foreground, h5.foreground, h6.foreground, span.foreground, a.foreground, li.foreground {
  color: var(--foreground-text);
}

p.limited-text, h1.limited-text, h2.limited-text, h3.limited-text, h4.limited-text, h5.limited-text, h6.limited-text, span.limited-text, a.limited-text, li.limited-text {
  --_line-number: 3;
  --_text-overflow: ellipsis;
  text-overflow: var(--_text-overflow);
  line-clamp: var(--_line-number);
  -webkit-line-clamp: var(--_line-number);
  overflow: hidden;
}

@media (prefers-color-scheme: light) {
  :where(:root, html, [data-theme=light]) {
    --text: #081426;
    --background: #f3f6fc;
    --primary: #8cb1e8;
    --secondary: #d9e5f7;
    --accent: #2e71d6;
  }
}
@media (prefers-color-scheme: dark) {
  :where(:root, html, [data-theme=dark]) {
    --text: #d9e5f7;
    --background: #03070d;
    --primary: #173c73;
    --secondary: #081426;
    --accent: #296cd1;
  }
}
.gradient {
  --_gradient-from: var(--secondary);
  --_gradient-to: var(--accent);
  --_from-percentage: 0%;
  --_to-percentage: 0%;
  --_gradient-direction: to left;
  background-image: linear-gradient(var(--_gradient-direction), var(--_gradient-from) var(--_gradient-to));
}

@property --base {
  syntax: "<lenght";
  inherits: false;
  initial-value: 1.6rem;
}
@property --block-spacing {
  syntax: "<lenght>";
  inherits: true;
  initial-value: 0.4rem;
}
@property --inline-spacing {
  syntax: "<lenght>";
  inherits: true;
  initial-value: 0.8rem;
}
@property --roundness {
  syntax: "<lenght>";
  inherits: true;
  initial-value: 0.4vmin;
}
:where(:root, html, *, *::after, *::before) {
  --offset-min: 0rem;
  --offset-sm: 1rem;
  --offset-md: 1.25rem;
  --offset-lg: 1.50rem;
  --offset-hg: 1.75rem;
  --outline-offset: var(--offset-md, 1.25rem);
  --outline-color: var(--accent);
  --outline-style: solid;
  --outline-sm: .1rem var(--outline-style) var(--outline-color);
  --outline-md: .2rem var(--outline-style) var(--outline-color);
  --outline-lg: .4rem var(--outline-style) var(--outline-color);
  --outline: var(--outline-md);
  --border-color: var(--accent);
  --border-style: solid;
  --border-sm: .1rem var(--border-style) var(--border-color);
  --border-md: .2rem var(--border-style) var(--border-color);
  --border-lg: .4rem var(--border-style) var(--border-color);
  --border-hg: .6rem var(--border-style) var(--border-color);
  --border: var(--border-sm);
  --box-shadow-sm: 0 .2rem .4rem rgba(0, 0, 0, 0.1);
  --box-shadow-lg: 0 .4rem .8rem rgba(0, 0, 0, 0.1);
  --box-shadow: var(--box-shadow-sm, 0 .2rem .4rem rgba(0, 0, 0, 0.1););
  --index-nav: 900;
  --index-popup: 999;
  --index-backtap: -1;
  --index-back: 20;
  --index-hidden-back: -20;
  --z-index: var(--index-back, 20);
  --effect-bright-level: var(--_effect-level, 150%);
  --effect-bright: brightness(var(--effect-bright-level));
  --transition-colors: background-color, color, border-color, outline-color, fill;
  --transition-motion: transform, scale, width, height, min-width, min-height, max-height, min-height;
  --transition-effect: opacity, filter;
  --transition-all: all;
  --transition-props: unset;
  --transition-ease: ease;
  --transition-ease-in: ease-in;
  --transition-linear: linear;
  --transition-ease-in-out: ease-in-out;
  --transition-middle-break: cubic-bezier(0, .82, 1, .21);
  --transition-out-back: cubic-bezier(0.68, -0.6, 0.32, 1.6);
  --transition-out-circle: cubic-bezier(0.85, 0, 0.15, 1);
  --transition-friction: cubic-bezier(0, 1.46 ,1 ,-0.29);
  --transition-time-ssl: 2s;
  --transition-time-sl: .8s;
  --transition-time-md: .4s;
  --transition-time-ft: .2s;
}

:where(:root, html) {
  --roundness: unset;
  --jump: 2;
  --theme: dark;
  --width: auto;
  --height: auto;
  --base: 1.6rem;
  --spacing: .8rem;
  --spacing-y: calc(--spacing / 2);
  --spacing-x: calc(--spacing * 2);
  --sl: calc(var(--base) / 10);
  --3xs: calc(var(--base) / 8);
  --xxs: calc(var(--base) / 6);
  --xs: calc(var(--base) / 4);
  --sm: calc(var(--base) / 2);
  --md: var(--base);
  --lg: calc(var(--base) * 2);
  --xl: calc(var(--base) * 4);
  --xxl: calc(var(--base) * 6);
  --3xl: calc(var(--base) * 8);
  --hg: calc(var(--base) * 10);
  --destructive: #772626;
  --light-destructive: color-mix(in oklab, var(--destructive), #FFF 30%);
  --blend-text-color: #000;
  --blend-back-color: #FFF;
  --blend-highlight-color: #FFF;
  --content-text: color-mix(in oklab, var(--text), var(--blend-text-color) 20%);
  --footer-text: color-mix(in oklab, var(--text), var(var(--blend-back-color) 75%));
  --muted-blend-intensity: 45%;
  --muted-text: color-mix(in oklab, var(--text), var(--blend-text-color) var(--muted-blend-intensity));
  --muted-accent: color-mix(in oklab, var(--accent), var(--background) var(--muted-blend-intensity));
  --muted-primary: color-mix(in oklab, var(--primary), var(--background) var(--muted-blend-intensity));
  --muted-secondary: color-mix(in oklab, var(--secondary), var(--background) var(--muted-blend-intensity));
  --muted-destructive: color-mix(in oklab, var(--destructive), var(--background) var(--muted-blend-intensity));
  --muted-background: color-mix(in oklab, var(--background) var(--blend-back-color) var(--muted-blend-intensity));
  --foreground-blend-intensity: 15%;
  --foreground-text: color-mix(in oklab, var(--text), var(--blend-highlight-color) var(--foreground-blend-intensity));
  --foreground-primary: color-mix(in oklab, var(--primary), var(--text) var(--foreground-blend-intensity));
  --foreground-background: color-mix(in oklab, var(--background), var(--text) var(--foreground-blend-intensity));
  --foreground-secondary: color-mix(in oklab, var(--secondary), var(--text) var(--foreground-blend-intensity));
  --foreground-accent: color-mix(in oklab, var(--accent), var(--text) var(--foreground-blend-intensity));
  --foreground-destructive: color-mix(in oklab, var(--destructive), var(--text) var(--foreground-blend-intensity));
  --gradient-primary-secondary-accent: linear-gradient(90deg, rgba(23,60,115,1) 0%, rgba(8,20,38,1) 35%, rgba(41,108,209,1) 100%);
  --gradient-primary-secondary: linear-gradient(90deg, rgba(23,60,115,1) 0%, rgba(8,20,38,1) 35%);
  --gradient-secondary-accent: linear-gradient(90deg, rgba(8,20,38,1) 35%, rgba(41,108,209,1) 100%);
  --gradient-primary-accent: linear-gradient(90deg, rgba(23,60,115,1) 50%, rgba(41,108,209,1) 100%);
  --highlight-text: color-mix(in oklab, var(--text) 60%);
  --highlight-accent: color-mix(in oklab, var(--accent) 60%);
  --bp-sm: 40em;
  --bp-md: 48em;
  --bp-lg: 64em;
  --bp-hg: 80em;
  --h-full: 100%;
  --h-half: 50%;
  --h-third: 33.3333%
  --h-quarter: 25%;
  --h-screen: 100vh;
  --h-half-screen: 50vh;
  --h-third-screen: 33.3333vh;
  --h-quarter-screen: 25vh;
  --w-full: 100%;
  --w-half: 50%;
  --w-third: 33.3333%
  --w-quarter: 25%;
  --w-screen: 100vw;
  --w-half-screen: 50vw;
  --w-third-screen: 33.3333vw;
  --w-quarter-screen: 25vw;
  --grid-cols: auto-fill;
  --grid-rows: auto;
  --grid-item-width: 10rem;
  --grid-justify-items: start;
  --padding-block: var(--sm);
  --padding-inline: var(--lg);
  --roundness: var(--sm);
  --inner-round: calc(var(--spacing) - var(--roudness));
  --round-sm: var(--sm);
  --round-md: var(--md);
  --round-lg: var(--lg);
  --round-full: 50%;
  --round-peal: 100vmax;
  --font-serif: "Times New Roman", Times, serif;
  --font-mono: "Cascadia Code", "Roboto Mono", monospace;
  --font-sans-serif: system-ui, "Inter", "Roboto", sans-serif;
  --font-weight: 400;
  --font-size: var(--md);
  --line-height: var(--line-height-relaxed);
  --line-height-tight: 1.25;
  --line-height-snug: 1.375;
  --line-height-normal: 1.5;
  --line-height-relaxed: 1.625;
  --line-height-loose: 2;
  --font-family: var(--font-sans-serif);
  --transition: var(--transition--duration, .2s) var(--transition--timing, ease-in);
  --transition--duration: .4s;
  --transition--timing: ease;
  --transition--props: all;
  --expand-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(162, 175, 185)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
}

body, .app, #root {
  --bg: var(--background);
  --spacing: var(--md);
  --spacing-block: var(--md); /* Added variable for block spacing */
  --spacing-inline: var(--lg);
  display: grid;
  place-items: center;
  min-height: 100vh;
  gap: var(--spacing);
  background-color: var(--bg);
}
body > :where(nav, header, main, footer):not(.hero), .app > :where(nav, header, main, footer):not(.hero), #root > :where(nav, header, main, footer):not(.hero) {
  --bg: var(--background);
  background-color: var(--bg);
}
body :where(main > section, div:not(.hero, .wrapper, .hamburguer-icon)), .app :where(main > section, div:not(.hero, .wrapper, .hamburguer-icon)), #root :where(main > section, div:not(.hero, .wrapper, .hamburguer-icon)) {
  --bg: var(--secondary);
  background-color: var(--bg);
  margin-block: var(--spacing-block);
  padding: var(--spacing);
}
body :where(main > section > :is(section, div):not(.hero, .wrapper, .hamburguer-icon)), .app :where(main > section > :is(section, div):not(.hero, .wrapper, .hamburguer-icon)), #root :where(main > section > :is(section, div):not(.hero, .wrapper, .hamburguer-icon)) {
  --spacing: var(--md);
  margin-block: var(--spacing);
}
body * :where(:not(h1, p, span)), .app * :where(:not(h1, p, span)), #root * :where(:not(h1, p, span)) {
  --txt: var(--text);
  color: var(--txt);
  border-radius: var(--roundness);
}

:where(a:not([role=img])) {
  --txt-color: var(--accent);
  width: fit-content;
  height: fit-content;
}
:where(a:not([role=img])):is(:visited, :link) {
  color: var(--txt-color);
}

:where(form) {
  --spacing: inherit;
  display: grid;
  place-items: center;
  justify-items: stretch;
  gap: var(--spacing);
}

:where(:focus-visible) {
  --outline: var(--outline-md);
  outline: var(--outline);
  outline-offset: var(--xs);
}

:where(:is(button, summary, li):not(.disabled):active) {
  filter: var(--effect-bright);
}

*,
*::before,
*::after {
  box-sizing: inherit;
  padding: 0;
  margin: 0;
  text-decoration: none;
}

::selection {
  background-color: var(--accent);
  color: white;
}

html {
  font-size: 62.5%;
  line-height: 1.15;
}

body,
body * + * {
  box-sizing: border-box;
}

img,
video,
svg {
  width: 100%;
  height: auto;
}

a {
  text-decoration: none;
}

ul,
ol {
  list-style: none;
}

summary {
  list-style: none;
}
summary::-webkit-details-marker {
  display: none;
}

details {
  --bg: var(--primary);
  --roundness: var(--xs);
  --spacing: var(--md);
  --outline: var(--outline-md);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: var(--spacing);
  margin-bottom: var(--spacing);
}
details summary {
  background-color: var(--bg);
  border-radius: var(--roundness);
  padding: var(--spacing);
  margin-bottom: var(--sm);
  display: flex;
  align-items: center;
  justify-content: space-between;
  transition: all 0.4s ease, filter 0.145s ease-out;
}
details summary::after {
  content: "";
  display: block;
  align-self: center;
  background-image: var(--expand-icon); /* Use the provided icon URL */
  background-size: cover;
  background-position: center;
  aspect-ratio: 1/1;
  width: 1.5em;
}
details summary::after {
  rotate: -90deg;
  transition: rotate 0.4s var(--transition-out-back);
}
details summary:is(:focus, :hover) {
  filter: brightness(125%);
  cursor: pointer;
}
details summary:focus {
  outline-offset: 0.15rem;
  outline: var(--outline);
}
details summary:active {
  filter: var(--effect-bright);
}
details summary:is(::marker, ::-webkit-details-marker) {
  display: none;
}
details p {
  --bg: var(--foreground-primary);
  background-color: var(--bg);
  padding: var(--spacing);
  border-radius: var(--roundness);
  transition: all 0.4s ease;
}
details[open] > summary::after {
  rotate: initial;
}

@keyframes margin-transition {
  0% {
    margin-bottom: 0;
  }
  100% {
    margin-bottom: var(--spacing);
  }
}
button {
  --width: 16em;
  --spacing: var(--md) var(--lg);
  --_roundness: var(--roundness);
  text-align: center;
  min-width: var(--width);
  cursor: pointer;
  text-transform: uppercase;
  border: none;
  padding: var(--md) var(--lg);
  border-radius: var(--_roundness);
  transition: background-color var(--transition), transform var(--transition);
}
button:hover:not(.disabled) {
  transform: translateY(2%);
}
button:active:not(.disabled) {
  transform: translateY(6%);
  filter: brightness(115%);
}
button.cta, button[type=submit] {
  --bg: var(--accent);
  background-color: var(--bg);
  will-change: background-color, transform;
  border: 0.2rem var(--accent) solid;
}
button.cta:hover, button[type=submit]:hover {
  background-color: color-mix(in oklab, var(--bg), white 20%);
}
button.cta:active, button[type=submit]:active {
  background-color: color-mix(in oklab, var(--bg), white 10%);
}
button.ghost {
  --bg: transparent;
  background-color: var(--bg);
  border: 0.2rem solid var(--accent);
  transition: transform var(--transition);
}
button.destructive {
  --bg: var(--destructive);
  background-color: var(--bg);
}
button.disabled {
  cursor: not-allowed;
  opacity: 0.8;
}

form:invalid button[type=submit] {
  pointer-events: none;
  opacity: 60%;
  cursor: not-allowed;
}

article {
  --bg: var(--primary);
  background-color: var(--bg);
  width: calc(2vmin + 15vw);
  aspect-ratio: var(--_aspect);
  text-align: center;
  word-break: normal;
  text-wrap: wrap;
  gap: 0.2vmin;
  display: grid;
  place-items: center;
  overflow: hidden;
}
article.hero-card {
  --_background-url: url(https://animehunch.com/wp-content/uploads/2020/10/Malevolent-Shrine.jpg);
  --_background-size: cover;
  --_background-pos: center;
  --_background-repeat: no-repeat;
  --_aspect: 16 / 9;
  --bg: none;
  aspect-ratio: var(--_aspect);
  background-image: var(--_background-url);
  background-size: var(--_background-size, cover);
  background-position: var(--_background-pos, center);
  background-repeat: var(--_background-repeat, no-repeat);
  transition: background-size 4s var(--transition-out-back);
}
article:not(.hero-card) {
  --_aspect: 1.5 / 1.85;
}
article:not(.hero-card):has(> img:first-child) {
  padding-block-end: var(--spacing);
  align-content: start;
  gap: 0.4vmin;
}
article:not(.hero-card) > img:first-child {
  align-self: self-start;
  max-width: 100%;
  object-fit: cover;
  object-position: top;
  --roundness: 0;
}
article:not(.hero-card) > :is(h2, h3, h4, h5, h6) {
  --font-size: var(--font-size);
  font-size: var(--font-size);
}
article:not(.hero-card) > :is(p, span) {
  --font-size: var(--font-size);
  font-size: 1.2vmin;
}

details[role=listbox] > ul, details[role=list] > ul {
  --bg: var(--foreground-primary);
  --border: var(--border-sm);
  --width: var(--w-full);
  background-color: var(--bg);
  max-width: var(--width);
  padding: var(--spacing) 0;
  border: var(--border);
  display: flex;
  flex-direction: column;
  overflow-x: hidden;
}
details[role=listbox] > ul li, details[role=listbox] > ul > *, details[role=list] > ul li, details[role=list] > ul > * {
  text-transform: capitalize;
}
details[role=listbox] > ul li, details[role=list] > ul li {
  --font-size: var(--md);
  --text-color: var(--text);
  --font-weight: 500;
  --bg: var(--foreground-primary);
  --border: var(--border-sm);
  --roudness: 0;
  --width: fit-content;
  font-size: var(--font-size);
  font-weight: var(--font-weight);
  color: var(--text-color);
  background-color: var(--bg);
  width: var(--widht);
  border-radius: 0;
  padding: var(--spacing);
  cursor: pointer;
  transition: background-color 0.4s ease, filter 0.2s ease-in;
}
details[role=listbox] > ul li:hover, details[role=listbox] > ul li:focus-visible, details[role=list] > ul li:hover, details[role=list] > ul li:focus-visible {
  --bg: var(--primary);
}
details[role=listbox] > ul li:active, details[role=list] > ul li:active {
  filter: var(--effect-bright);
}
details[role=listbox] > ul li *, details[role=list] > ul li * {
  color: inherit;
}
details[role=listbox] > ul li:has(> a), details[role=list] > ul li:has(> a) {
  padding: 0;
}
details[role=listbox] > ul li a, details[role=list] > ul li a {
  --roundness: 0;
  --width: var(--w-full);
  --bg: transparent;
  background-color: var(--bg);
  display: inline-flex;
  height: 100%;
  min-width: var(--width);
  margin: 0;
  padding: var(--spacing);
  border-radius: var(--roundness);
}
details[role=listbox] > ul li a:focus-visible, details[role=list] > ul li a:focus-visible {
  outline-offset: 0;
  --outline: var(--outline-sm);
  --bg: var(--primary);
}

select {
  --font-size: var(--md);
  --text-color: var(--text);
  --font-weight: 500;
  cursor: pointer;
  appearance: none;
  width: 100%;
  font-family: var(--font-family);
  font-size: var(--font-size);
  font-weight: var(--font-weight);
  text-transform: capitalize;
  /* &::after {
      content: "";
      width: 30em;
      height: 30em;
      background-color: var(--select-arrow);
      clip-path: polygon(100% 0%, 0 0%, 50% 100%);
      z-index: 2000;
  } */
}
select::-ms-expand {
  display: none;
}
select::after {
  content: "";
  display: block;
  align-self: center;
  background-image: var(--expand-icon); /* Use the provided icon URL */
  background-size: cover;
  background-position: center;
  aspect-ratio: 1/1;
  width: 1.5em;
}
select::after {
  rotate: -90deg;
  transition: rotate 0.4s var(--transition-out-back);
  z-index: -200;
  background-color: khaki;
}
select, select > * {
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
}
select > option {
  --bg: var(--foreground-primary);
  --border: var(--border-sm);
  color: var(--text-color);
  background-color: var(--bg);
  border-radius: 0;
  padding: var(--spacing);
  cursor: pointer;
  transition: background-color 0.4s ease, filter 0.2s ease-in;
}
select > option:hover {
  --bg: var(--primary);
}
select > option:active {
  filter: var(--effect-bright);
}

.gallery {
  --_gallery-gap: 0.4rem;
  --_gallery-height: 72rem;
  --_bg: transparent;
  background-color: var(--_bg);
  display: flex;
  align-items: center;
  justify-content: center;
  width: 50%;
  align-self: center;
  margin: var(--spacing) auto;
  gap: var(--_gallery-gap);
}
.gallery * {
  transition: flex 0.666s var(--transition-motion), border-radius 0.2s var(--transition-middle-break);
}
.gallery > figure {
  flex: 1;
  text-align: center;
  transition: flex 0.666s ease, border-radius 0.2s var(--transition-middle-break);
}
.gallery > figure:hover {
  flex: 3;
}
.gallery > figure:hover > img {
  border-radius: var(--roundness);
}
.gallery > figure figcaption {
  opacity: 0;
  transition: opacity 1.44s ease-out;
}
.gallery > figure:hover figcaption {
  opacity: 1;
}
.gallery img {
  cursor: pointer;
  border-radius: 100vmax;
  width: 100%;
  object-fit: cover;
  object-position: center;
  height: var(--_gallery-height);
  transition: border-radius 0.4s var(--transition-out-circle);
}

a.scroll-to-top {
  display: grid;
  place-items: center;
  text-align: center;
  position: sticky;
  padding: var(--spacing);
  bottom: 0;
  left: 90%;
  width: 5%;
  z-index: 20;
  aspect-ratio: 1/1;
  background-color: red;
  behavior: smooth;
  transform: translateY(200%);
}

div.hamburguer-icon {
  width: 8vmin;
  border-radius: 100vmax;
  padding: 0.4vmin;
  background-color: rebeccapurple;
  aspect-ratio: 1/1;
  display: flex;
  flex-direction: column;
  gap: 0.6vmin;
  align-items: center;
  justify-content: center;
}
div.hamburguer-icon span {
  background-color: var(--background);
  display: block;
  width: 80%;
  height: 0.6rem;
  backface-visibility: hidden;
}

input:focus {
  outline: var(--accent) 0.2rem solid;
}

div[role=separator] {
  --_separator-h: 100%;
  --_separotor-w: .1rem;
  --bg: var(--secondary);
  height: var(--_separator-h);
  width: var(--_separotor-w);
  background-color: var(--bg, var(--secondary));
}

.carousel {
  position: relative;
  max-width: 100%;
}
.carousel figure, .carousel .carousel__wrapper {
  display: flex;
  aspect-ratio: 16/9;
  overflow-x: auto;
  scroll-snap-type: x mandatory;
  scroll-behavior: smooth;
  box-shadow: 0 1.5rem 3rem -0.75rem hsla(0, 0%, 0%, 0.25);
  border-radius: 0.5rem;
  -ms-overflow-style: none; /* Hide scrollbar IE and Edge */
  scrollbar-width: none; /* Hide scrollbar Firefox */
}
.carousel figure::-webkit-scrollbar, .carousel .carousel__wrapper::-webkit-scrollbar {
  display: none;
}
.carousel figure img, .carousel figure .carousel__img, .carousel .carousel__wrapper img, .carousel .carousel__wrapper .carousel__img {
  flex: 1 0 100%;
  scroll-snap-align: start;
  object-fit: cover;
}
.carousel nav, .carousel .carousel__nav {
  --bg: transparent;
  display: flex;
  column-gap: 1rem;
  position: absolute;
  bottom: 1.25rem;
  left: 50%;
  transform: translateX(-50%);
  z-index: 1;
}
.carousel nav a, .carousel nav .carousel__link, .carousel .carousel__nav a, .carousel .carousel__nav .carousel__link {
  width: 0.5rem;
  height: 0.5rem;
  border-radius: 50%;
  background-color: #fff;
  opacity: 0.75;
  transition: opacity ease 250ms;
}
.carousel nav a:hover, .carousel nav .carousel__link:hover, .carousel .carousel__nav a:hover, .carousel .carousel__nav .carousel__link:hover {
  opacity: 1;
}

form:invalid input:invalid {
  border: 0.2rem var(--destructive) solid;
  transition: border-color var(--transition);
}

input,
label,
textarea {
  cursor: pointer;
  transition: background-color var(--transition), filter var(--transition);
}

textarea {
  padding: var(--spacing);
  background-color: var(--muted-primary);
  border: 0.2rem solid var(--primary);
  resize: none;
  font-family: var(--font-family);
  font-size: var(--font-size);
  outline: none;
}
textarea:hover {
  outline: none;
}
textarea:active {
  outline: none;
}
textarea:focus-visible {
  outline: var(--outline);
}

label:not([role=button]) {
  --spacing-y: var(--sm);
  --spacing-x: var(--md);
  --width: 100%;
  margin-inline: 0;
  width: fit-content;
  height: fit-content;
  display: flex;
  gap: var(--spacing-y);
  align-items: center;
}
label:not([role=button]):has(> input[type=file]) {
  --width: var(--w-full, 100%);
  --height: calc(32vmin + 5vw);
  --font-weight: 600;
  font-weight: var(--font-weight);
  vertical-align: center;
  display: flex;
  align-items: center;
  word-wrap: break-word;
  justify-content: center;
  border: 0.1rem dashed var(--text);
  width: var(--width);
  height: var(--height);
  padding: var(--spacing-y) var(--spacing-x);
  text-align: center;
  transition: background-color 0.2s ease, filter 0.4s ease-in;
  position: relative;
  --_effect-level: 0%;
}
label:not([role=button]):has(> input[type=file]):hover {
  background-color: var(--accent);
}
label:not([role=button]):has(> input[type=file]):active {
  filter: var(--effect-bright);
}
label:not([role=button]):has(> input[type=file]:focus-visible) {
  --outline: var(--outline-md);
  outline-offset: var(--outline-offset);
  outline: var(--outline);
}
label:not([role=button]):has(> input[type=color]) {
  display: flex;
  align-items: center;
}
input, select {
  --spacing: var(--md);
  --roundness: .24vmin;
  --bg: var(--muted-primary);
  --font-size: 1.50rem;
  --width: 100%;
  font-weight: 500;
  font-size: var(--font-size);
  border: 0.2rem solid var(--foreground-accent);
  background-color: var(--bg);
  border-radius: var(--roundness);
  padding: var(--spacing);
  outline: none;
  transition: all var(--transition);
}
input:focus, select:focus {
  border-color: var(--accent);
}
input::placeholder, select::placeholder {
  --text-color: var(--muted-text);
  color: var(--text-color);
}
input:is([type=color], [type=date], [type=radio], [type=checkbox], [type=range]), select:is([type=color], [type=date], [type=radio], [type=checkbox], [type=range]) {
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  accent-color: var(--accent);
}
input[type=radio], select[type=radio] {
  border-radius: 50%;
  padding: 0.2vmin;
  display: grid;
  place-items: center;
}
input[type=radio]::after, select[type=radio]::after {
  content: "";
  display: block;
  scale: 0;
  width: 0.8em;
  border-radius: inherit;
  aspect-ratio: 1/1;
  background-color: var(--accent);
  transition: scale 0.2s var(--transition-out-circle);
}
input[type=radio]:checked::after, select[type=radio]:checked::after {
  scale: 1;
}
input:is([type=checkbox], [type=radio]), select:is([type=checkbox], [type=radio]) {
  --spacing: var(--sm);
}
input[type=file], select[type=file] {
  position: absolute;
  inset: 0;
  z-index: -20;
  opacity: 0;
}
input[type=file]:focus-visible, select[type=file]:focus-visible {
  all: none;
}
input[type=color], select[type=color] {
  --width: 2.4vmax;
  --bg: transparent;
  padding: 0;
  margin: 0;
  border: none;
  overflow: hidden;
  aspect-ratio: 1/1;
  width: max(var(--width), 2.4vmin);
  border-radius: var(--roundness);
  background-color: var(--bg, transparent);
  transition: border 0.2s ease;
}
input[type=color]::-webkit-color-swatch, select[type=color]::-webkit-color-swatch {
  border-radius: var(--roundness);
  border: 0.1rem var(--blend-back-color) solid;
}
input[type=color]:is(:active, :focus)::-webkit-color-swatch, select[type=color]:is(:active, :focus)::-webkit-color-swatch {
  border: 0.2rem var(--text) solid;
}
input[type=checkbox]:not([role=switch]), select[type=checkbox]:not([role=switch]) {
  overflow: hidden;
  position: relative;
}
input[type=checkbox]:not([role=switch]):checked::after, select[type=checkbox]:not([role=switch]):checked::after {
  scale: 45%;
}
input[type=checkbox]:not([role=switch])::after, select[type=checkbox]:not([role=switch])::after {
  content: "";
  --borderWidth: .6rem;
  --height: 2em;
  --width: 1em;
  --borderColor: var(--accent);
  position: absolute;
  inset: 0;
  transform: rotate(40deg) translate(-65%, -50%);
  height: var(--height);
  width: var(--width);
  scale: 0;
  border-bottom: var(--borderWidth) solid var(--borderColor);
  border-right: var(--borderWidth) solid var(--borderColor);
  transition: inherit;
}
input[type=date], input[type=time], input[type=datetime-local], select[type=date], select[type=time], select[type=datetime-local] {
  --bg: var(--primary);
  --text-color: var(--text);
  --font-weight: 500;
  display: inline-flex;
  align-items: center;
  text-align: center;
  vertical-align: center;
  background-color: var(--bg);
  color: var(--text-color);
  border: none;
  padding: 0.4vmin 0.8vmin;
  border-radius: var(--roundness);
  font-family: var(--font-family);
  font-weight: var(--font-weight);
  letter-spacing: 0.2ch;
}
input[type=date]:hover, input[type=time]:hover, input[type=datetime-local]:hover, select[type=date]:hover, select[type=time]:hover, select[type=datetime-local]:hover {
  --bg: var(--accent);
}
input[type=date]:active, input[type=time]:active, input[type=datetime-local]:active, select[type=date]:active, select[type=time]:active, select[type=datetime-local]:active {
  filter: brightness(125%);
}
input[type=date]::-webkit-calendar-picker-indicator, input[type=time]::-webkit-calendar-picker-indicator, input[type=datetime-local]::-webkit-calendar-picker-indicator, select[type=date]::-webkit-calendar-picker-indicator, select[type=time]::-webkit-calendar-picker-indicator, select[type=datetime-local]::-webkit-calendar-picker-indicator {
  background-color: var(--secondary);
  padding: 0.6vmin 0.8vmin;
  border-radius: var(--roundness);
  align-self: center;
  margin-top: 2.4%;
  cursor: pointer;
}
input[type=radio], select[type=radio] {
  width: 200%;
}
input[type=range], select[type=range] {
  --width: 100%;
  --bg: transparent;
  --roundness: 100vmax;
  --spacing: .4vmin;
  height: fit-content;
  padding: 0;
  width: var(--width); /* Corrected typo here */
  background-color: var(--bg, transparent);
  border-radius: var(--roundness);
  outline-offset: 0.2rem;
}
input:is([type=checkbox], [type=radio]):focus-visible, select:is([type=checkbox], [type=radio]):focus-visible {
  --outline-offset: var(--outline-lg);
  outline-offset: var(--outline-offset);
  outline: var(--outline);
}

.logo {
  --roundness: 50%;
  border-radius: var(--roundness);
  width: 8vmin;
  aspect-ratio: 1/1;
  object-fit: cover;
  object-position: center;
}

video {
  aspect-ratio: 16/9;
}

label[role=button]:has(> input[type=checkbox]) input[type=checkbox] {
  display: none;
}

label[role=button]:has(> input[type=checkbox]:checked) {
  background-color: red;
}
label[role=button]:has(> input[type=checkbox]:checked) + [role=dialog] {
  display: grid;
}

label[role=button]:has(> input[type=checkbox]) + [role=dialog] {
  display: none;
  --_z-index: var(--index-popup);
  --_modal-top: 50%;
  --_modal-left: 50%;
  z-index: var(--_z-index);
  position: fixed;
  top: var(--_modal-top);
  left: var(--_modal-left);
  transform: translate(-50%, -50%);
}
label[role=button]:has(> input[type=checkbox]) + [role=dialog] [role=dialog] {
  position: fixed;
  --_modal-top: inherit;
  z-index: calc(var(--_z-index) - 5);
  top: var(--_modal-top);
}

html:has(label[role=button] > input[type=checkbox]:checked) {
  overflow-y: visible;
}

:is(article[role=dialog], article[role=dialog] article[role=dialog]) {
  --_modal-width: 50dvw;
  --_modal-height: 50dvh;
  --_bg: var(--foreground-background);
  width: var(--_modal-width, 50%);
  height: var(--_modal-height, 50%);
  overflow: hidden;
  background-color: var(--_bg);
}
:is(article[role=dialog], article[role=dialog] article[role=dialog]) > header {
  background-color: black;
}
:is(article[role=dialog], article[role=dialog] article[role=dialog]) > footer {
  background-color: chocolate;
}

.modal-close {
  float: right;
  font-size: 2.4em;
  transition: color 0.1s ease-in;
}
.modal-close:hover {
  color: var(--light-destructive);
}

/* SWITCH COMPONENT */
/* Default Styling */
label:has(input[type=checkbox][role=switch],
input[type=checkbox][role=switch]) {
  --_switch-w: 4.4em;
  --_switch-h: 2.4em;
  --_switch-round: 100vmax;
  --_switch-default-bg: var(--muted-secondary);
  --_switch-focus-outline: var();
  --_switch-color: var(--foreground-secondary);
  --_switch-slider-color: whitesmoke;
  /* GLOBAL */
  --spacing: var(--md);
  margin: var(--spacing);
}

/* Hiding it to achieve the toggle effect */
input[type=checkbox][role=switch] {
  appearance: none;
  width: var(--_switch-w);
  height: var(--_switch-h);
  border-radius: var(--_switch-round);
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var(--_switch-color);
  transition: transform 0.24s ease-in, opacity 0.4s ease-out, background-color 0.8s cubic-bezier(0.19, 1, 0.22, 1);
}
input[type=checkbox][role=switch]::after {
  content: "";
  background-color: var(--_switch-slider-color);
  aspect-ratio: 1/1;
  height: 80%;
  position: absolute;
  top: 10%;
  left: 5%;
  border-radius: 50%;
  transition: transform 0.24s ease-in, opacity 0.4s ease-out, background-color 0.8s cubic-bezier(0.19, 1, 0.22, 1);
}

/* Common styling between switches */
input[type=checkbox][role=switch] {
  width: var(--_switch-w);
}

input[type=checkbox][role=switch]:focus {
  outline: var(--accent) 0.2rem solid;
  outline-offset: 0.18rem;
}

/* Change Switch background when checked */
input[role=switch][type=checkbox]:checked {
  --_switch-color: var(--primary);
}

input[role=switch][type=checkbox]:checked:not(:is(.squished, .squared)) {
  background-color: var(--primary);
}
input[role=switch][type=checkbox]:checked:not(:is(.squished, .squared))::after {
  transform: translateX(120%);
}

/* SWITCH VARIATIONS */
/* Squished Variation */
input[type=checkbox][role=switch].squished {
  --_switch-h: .8em;
  height: var(--_switch-h);
  width: var(--_switch-w);
  border-radius: var(--_switch-round);
  background-color: var(--foreground-secondary);
  position: relative;
  overflow: visible;
  padding: 0;
}
input[type=checkbox][role=switch].squished::after {
  content: "";
  background-color: var(--_switch-slider-color);
  height: 250%;
  aspect-ratio: 1/1;
  position: absolute;
  top: 50%;
  left: -2.5%;
  transform: translateY(-50%);
  border-radius: inherit;
  transition: transform 0.24s ease-in, opacity 0.4s ease-out, background-color 0.8s cubic-bezier(0.19, 1, 0.22, 1);
}

/* Change Switch background when checked */
input[role=switch][type=checkbox].squished:checked {
  background-color: var(--primary);
}
input[role=switch][type=checkbox].squished:checked::after {
  transform: translate(252.5%, -50%);
}

/* Squared Variation */
input[type=checkbox][role=switch].squared {
  /* Add specific styles for squared variation */
  width: var(--_switch-w);
  height: var(--_switch-h);
  border-radius: 0;
  background-color: var(--foreground-secondary);
  position: relative;
}
input[type=checkbox][role=switch].squared::after {
  content: "";
  background-color: var(--_switch-slider-color);
  aspect-ratio: 1/1;
  height: 80%;
  position: absolute;
  top: 10%;
  left: 5%;
  border-radius: 0;
  transition: transform 0.24s ease-in, opacity 0.4s ease-out, background-color 0.8s cubic-bezier(0.19, 1, 0.22, 1);
}

/* Change Switch background when checked */
input[role=switch][type=checkbox].squared:checked {
  background-color: var(--primary);
}
input[role=switch][type=checkbox].squared:checked::after {
  transform: translateX(120%);
}

body > footer {
  --_width: 100%;
  --_height: 35vmin;
  --_txt: color-mix(in oklab, var(--text-color) 90%, black 10%);
  color: var(--_txt);
  align-self: flex-end;
  display: grid;
  place-items: center;
  width: var(--_width);
  height: var(--_height);
  border-top: 0.1rem solid var(--foreground-accent);
}
body > footer ul {
  display: flex;
  align-items: center;
  justify-content: center;
}
body > footer ul a {
  color: var(--_txt);
}

body > :is(header, header.header-sticky) {
  --widht: 100%;
  --height: 10vmin;
  min-width: var(--widht);
  height: var(--height);
  display: flex;
  align-items: center;
  justify-content: space-around;
  gap: var(--spacing);
  align-self: flex-start;
}
body > :is(header, header.header-sticky) a[role=img], body > :is(header, header.header-sticky) a:has(img.logo) {
  display: flex;
  align-items: center;
}
body > :is(header, header.header-sticky) a[role=img] :is(img, svg, em), body > :is(header, header.header-sticky) a:has(img.logo) :is(img, svg, em) {
  box-sizing: content-box;
  border: var(--primary) 0.4vmin solid;
}

body > header.header-sticky {
  --_header-top-position: 0;
  position: sticky;
  top: var(--_header-top-position, 0);
  z-index: 100;
}

.hero {
  --bg-img-url: url(https://images.unsplash.com/photo-1528353518104-dbd48bee7bc4?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1332&q=80);
  --bg-img-size: cover;
  --bg-img-repeat: no-repeat;
  --bg-img-pos: center;
  display: grid;
  place-items: center;
  align-content: center;
  width: var(--w-full);
  height: var(--h-screen);
  background-color: var(--background);
  background-image: var(--bg-img-url);
  background-size: var(--bg-img-size);
  background-repeat: var(--bg-img-repeat);
  background-position: var(--bg-img-pos);
  text-align: center;
}
.hero :is(h1, p) {
  --font-size: 11.44rem;
}
.hero h1 {
  font-size: var(--font-size);
  color: var(--accent);
}
.hero p {
  font-size: calc(var(--font-size) / 5);
}

body > main {
  --width: 80%;
  --height: auto;
  --spacing: var(--lg);
  --bg: inherit;
  width: clamp(75%, var(--width), 100vw);
  height: var(--height);
  padding: var(--md) var(--lg);
  border-radius: var(--roundness);
  margin-block: var(--spacing);
  background-color: var(--bg);
}

header > nav {
  --font-size: 1.75rem;
  --bg: auto;
  background-color: var(--bg);
  width: clamp(30vmin, 40rem, 45%);
}
header > nav * {
  transition: opacity var(--transition);
}
header > nav ul {
  display: flex;
  align-items: center;
  justify-content: space-around;
  flex-wrap: wrap;
}
header > nav ul li {
  width: fit-content;
  height: fit-content;
}
header > nav ul li a {
  font-size: var(--font-size);
  font-weight: 600;
}
header > nav ul li:is(:hover, :focus) a {
  opacity: 0.8;
}
header > nav ul li:active a {
  opacity: 0.6;
}

@media only screen and (max-width: 37.5em) {
  header nav ul {
    display: none;
    visibility: hidden;
  }
}
section {
  height: auto;
}
section section {
  margin-block: var(--spacing-block);
}

/*  --text: #e8e8ed;
 --background: #09090c;
 --primary: #47465d;
 --secondary: #16161d;
 --accent: #6f6e91; */
:where(.row, .col) {
  --flex-spacing: 0;
  display: flex;
  gap: var(--flex-spacing);
  flex-wrap: wrap;
}

.row {
  flex-direction: row;
}

.col {
  flex-direction: column;
}

.flex-cluster, .flex-cluster-grow {
  display: flex;
  gap: var(--spacing);
  flex-wrap: wrap;
}

.flex-cluster-grow > * {
  flex: 1;
}

:where(.grid-dynamic, .grid-fixed) {
  --grid-cols: auto-fill;
  --grid-rows: min-content;
  --grid-item-width: 12rem;
  --grid-justify-items: center;
  --grid-min-cols: 1;
}

.grid-dynamic {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(min(var(--grid-item-width), 100%), 1fr));
  grid-auto-rows: var(--grid-rows);
  justify-content: space-between;
  justify-items: var(--grid-justify-items);
  place-content: var(--grid-justify-items);
  gap: var(--spacing);
  height: auto;
  width: 100%;
}
.grid-dynamic > * {
  /* --bg: var(--foreground-secondary);

  background-color: var(--bg); */
  align-self: stretch;
  width: 100%;
}

.grid-fixed {
  --grid-cols: 2;
  --grid-rows: auto;
  display: grid;
  grid-template-columns: repeat(var(--grid-cols), minmax(min(var(--grid-item-width), 100%), 1fr));
  grid-template-rows: var(--grid-rows);
  justify-content: center;
  gap: var(--spacing);
}

.reel {
  --grid-auto-cols: 30%;
  display: grid;
  gap: var(--spacing);
  grid-auto-flow: column;
  grid-auto-columns: calc(var(--grid-auto-cols) - var(--spacing) / 2);
  overflow-x: scroll;
  scroll-snap-type: x mandatory;
  scroll-padding: var(--spacing);
}
.reel > * {
  scroll-snap-align: start;
}

:where(.wrapper) {
  width: auto;
  height: auto;
  margin: 0;
  padding: 0;
}

/* This code simulates a family hierarchy, where the father/parent shares his attributes across the family tree.
   It aims to be a more flexible way to work with inheritance. */
:where(.parent) {
  --bg: currentColor;
  --text-color: currentColor;
  --spacing: var(--md);
  --font-size: var(--font-size);
  background-color: var(--bg);
  /* All children, no matter the nesting level */
  /* All children, but only the direct ones */
  /* Only the first direct child */
  /* All the first children, no matter the nesting level */
  /* All the last children, no matter the nesting level */
  /* Only the last direct child */
  /* Odd children */
  /* Even children */
}
:where(.parent).colors {
  --bg: currentColor;
  --text-color: currentColor;
}
:where(.parent).sizes {
  --spacing: var(--spacing);
}
:where(.parent).font {
  --font-size: var(--font-size);
  --text-color: var(--text-color);
}
:where(.parent).all-childs *:not(.bastard) {
  background-color: inherit;
}
:where(.parent).direct-childs > *:not(.bastard) {
  background-color: inherit;
}
:where(.parent).first-child-only > :first-child:not(.bastard) {
  background-color: inherit;
}
:where(.parent).all-first-childs :first-child:not(.bastard) {
  background-color: inherit;
}
:where(.parent).all-last-childs :last-child:not(.bastard) {
  background-color: inherit;
}
:where(.parent).last-child-only > :last-child:not(.bastard) {
  background-color: inherit;
}
:where(.parent).odd-children > *:nth-child(odd):not(.bastard) {
  background-color: inherit;
}
:where(.parent).even-children > *:nth-child(even):not(.bastard) {
  background-color: inherit;
}

.text-align-center {
  text-align: center;
}

.text-align-left {
  text-align: left;
}

.text-align-right {
  text-align: right;
}

.text-align-justify {
  text-align: justify;
}

.text-align-end {
  text-align: end;
}

.text-align-start {
  text-align: start;
}

/*# sourceMappingURL=yonaka.temps.css.map */
