/* This code simulates a family hierarchy, where the father/parent shares his attributes across the family tree.
   It aims to be a more flexible way to work with inheritance. */

    :where(.parent) {
        --bg: currentColor;
        --text-color: currentColor;
        --spacing: var(--md);
        --font-size: var(--font-size);

        --_heritage-type: inherit;

        all: var(--bg);


    // Heritage Variants -----------------------------------------------------------

    // Inherit colors

    &.colors {
        --bg: currentColor;
        --text-color: currentColor;
    }

    // Inherit the the spacing vars

    &.sizes {
        --spacing: var(--spacing);
    }

    // Inherit the font variables

    &.font {
        --font-size: var(--font-size);
        --text-color: var(--text-color);
    }

    /* All children, no matter the nesting level */
    &.all-childs *:not(.bastard) {
        all: var(--_heritage-type);

    }

    /* All children, but only the direct ones */
    &.direct-childs > *:not(.bastard) {
        all: var(--_heritage-type);

    }

    /* Only the first direct child */
    &.first-child-only > :first-child:not(.bastard) {
        all: var(--_heritage-type);

    }

    /* All the first children, no matter the nesting level */
    &.all-first-childs :first-child:not(.bastard) {
        all: var(--_heritage-type);

    }

    /* All the last children, no matter the nesting level */
    &.all-last-childs :last-child:not(.bastard) {
        all: var(--_heritage-type);

    }

    /* Only the last direct child */
    &.last-child-only > :last-child:not(.bastard) {
        all: var(--_heritage-type);

    }

    /* Odd children */
    &.odd-children > *:nth-child(odd):not(.bastard) {
        all: var(--_heritage-type);

    }

    /* Even children */
    &.even-children > *:nth-child(even):not(.bastard) {
        all: var(--_heritage-type);

    }
}
