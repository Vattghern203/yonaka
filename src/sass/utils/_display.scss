// FLEX

:where(.row, .col) {
    --flex-spacing: 0;

    display: flex;
    gap: var(--flex-spacing);
    flex-wrap: wrap;
}

.row {
    flex-direction: row;
}

.col {
    flex-direction: column;
}

.flex-cluster, .flex-cluster-grow {
    display: flex;
    gap: var(--spacing);
    flex-wrap: wrap;
}

.flex-cluster-grow > * {
    flex: 1;
}

// GRID

:where(.grid-dynamic, .grid-fixed) {

    --grid-cols: auto-fill;
    --grid-rows: min-content;
    --grid-item-width: 12rem;
    --grid-justify-items: center;

    --grid-min-cols: 1;
}

.grid-dynamic {
    display: grid;
    grid-template-columns: repeat(
        auto-fit, 
        minmax(min(var(--grid-item-width), 100%), 1fr)
    );
    grid-auto-rows: var(--grid-rows);
    justify-content: space-between;
    justify-items: var(--grid-justify-items);
    place-content: var(--grid-justify-items);
    gap: var(--spacing);
    height: auto;
    width: 100%;

    & > * {
        /* --bg: var(--foreground-secondary);

        background-color: var(--bg); */
        align-self: stretch;
        width: 100%;
    }
}

.grid-fixed {

    --grid-cols: 2;
    --grid-rows: auto;

    display: grid;
    grid-template-columns: repeat(
        var(--grid-cols),
        minmax(
            min(
                var(--grid-item-width), 100%),
            1fr)
    );
    grid-template-rows: var(--grid-rows);
    justify-content: center;
    gap: var(--spacing);
}

.reel {

    --grid-auto-cols: 30%;

    display: grid;
    gap: var(--spacing);
    grid-auto-flow: column;
    grid-auto-columns: calc(var(--grid-auto-cols) - (var(--spacing) / 2));
    overflow-x: scroll;
    scroll-snap-type: x mandatory;
    scroll-padding: var(--spacing);

    & > * {
        scroll-snap-align: start;
    }
}

// Wrapper

:where(.wrapper) {
    width: auto;
    height: auto;
    margin: 0;
    padding: 0;
}